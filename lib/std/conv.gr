module std;
shorten std;
shorten collections;

class Conv: public
{
    init (): private
    {
    }

    how boolean parseBoolean(text: string): public, static
    {
        if text == "true"
            return true;
        else
            return false;
    }

    how int parseInt(text: string): public, static
    {
        let chars: List<string> = text.toCharList();

        let result: int = 0;
        let factor: int = 1;
        
        for i, 0 to chars.len()
        {
            let index: int = chars.len() - 1 - i;
            let digit: int = Conv.getDigit(chars.at(index));
            
            if digit == -1
            {
                err StdRes.invalidFormat() "Specified string is not in valid format.";
            }

            result += digit * factor;
            factor *= 10;
        }

        return result;
    }

    how int getDigit(source: string): private, static
    {
        if source == "0"
            return 0;
        else if source == "1"
            return 1;
        else if source == "2"
            return 2;
        else if source == "3"
            return 3;
        else if source == "4"
            return 4;
        else if source == "5"
            return 5;
        else if source == "6"
            return 6;
        else if source == "7"
            return 7;
        else if source == "8"
            return 8;
        else if source == "9"
            return 9;
        
        return -1;
    }
}