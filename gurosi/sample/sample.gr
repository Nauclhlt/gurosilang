mine "C:/workspace/CSharp/GitProjects/gr/core.grsl";

macro printf(value) std.Log.println(value);

module Hangman;
shorten Hangman;
shorten std;
shorten collections;

run
{
    let cnv: Converter = new Converter(&(string)strToInt);
    let value: int = cnv.convert("100") as int;
}

how int strToInt(source: string)
{
    return Conv.parseInt(source);
}

# FIXME: Extended classes have the base class's constructor
class Converter: public
{
    field private _conv: funcptr;

    init (): private
    {
    }

    init (conv: funcptr): public
    {
        _conv = conv;
    }

    how any convert(source: any): public
    {
        let args: array<any> = alloc any[1];
        args[0] = source;
        return _conv.call_ret(args);
    }
}

class Vector2d: public
{
    field public X: float;
    field public Y: float;

    init (x: float, y: float): public
    {
        self.X = x;
        self.Y = y;
    }

    init (r: float, angle: float): public
    {
        X = r * std.Math.cos(Math.radians(angle));
        Y = r * std.Math.sin(Math.radians(angle));
    }

    init (source: Vector2d): public
    {
        self.X = source.X;
        self.Y = source.Y;
    }

    how float length(): public
    {
        return Math.sqrt(X * X + Y * Y);
    }

    how Vector2d normalize(): public
    {
        let length: float = self.length();
        return new Vector2d(X / length, Y / length);
    }

    how Vector2d rotate(deg: float): public
    {
        let rad: float = Math.radians(deg);
        return new Vector2d(X * Math.cos(rad) - Y * Math.sin(rad), X * Math.sin(rad) + Y * Math.cos(rad));
    }
}